# vim: set ft=yaml ts=2 sw=2:
name: Build and Test
on:
  workflow_call:
    inputs:
      matrix-os-version:
        description: "JSON array as a string, a list of operating systems for the matrix build"
        required: true
        type: string
      matrix-python-version:
        description: "JSON array as a string, a list of Python versions for the matrix build"
        required: true
        type: string
      poetry-version:
        description: "Version of Poetry to use for the build (>=1.2.0)"
        required: true
        type: string
      poetry-plugins:
        description: "Comma-separated list of Poetry plugins to install, in addition to poetry-dynamic-versioning"
        required: false
        type: string
        default: ""
      poetry-cache-venv:
        description: "Whether to cache the Poetry virtualenv"
        required: false
        type: boolean
        default: true
      poetry-cache-install:
        description: "Whether to cache the Poetry install"
        required: false
        type: boolean
        default: true
      test-suite-command:
        description: "Shell command used to execute the test suite"
        required: false
        type: string
        default: "./run suite"
      timeout-minutes:
        description: "Job timeout in minutes"
        required: false
        type: number
        default: 30
      enable-coveralls:
        description: "Whether to enable coverage reporting to coveralls.io"
        required: false
        type: boolean
        default: true
jobs:
  build:
    name: "Build"
    strategy:
      matrix:
        os: "${{ fromJson(inputs.matrix-os-version) }}"
        python: "${{ fromJson(inputs.matrix-python-version) }}"
    defaults:
      run:
        shell: bash
    runs-on: "${{ matrix.os }}"
    timeout-minutes: "${{ inputs.timeout-minutes }}"
    steps: 
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we need this so that tags are pulled; unfortunately it also pulls all history
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python }}"
      - name: Setup Poetry
        uses: pronovic/setup-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          plugins: "poetry-dynamic-versioning[plugin]:1.2.0,${{ inputs.poetry-plugins }}"
          cache-venv: "${{ inputs.poetry-cache-venv }}"
          cache-poetry: "${{ inputs.poetry-cache-install }}"
          cache-suffix: "002"  # safest to bump this when upgrading plugin above
      - name: Install dependencies
        run: |
          # Install dependencies
          poetry install --sync --no-interaction
      - name: Run test suite
        run: |
          # Run the test suite
          ${{ inputs.test-suite-command }}
      - name: Upload coverage data to coveralls.io
        if: "${{ inputs.enable-coveralls && github.run_attempt == '1' }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          COVERALLS_FLAG_NAME: "${{ runner.os }}-python${{ matrix.python }}"
          COVERALLS_PARALLEL: true
        run: | 
          # Upload coverage data to coveralls.io
          poetry run coveralls --service=github
  coveralls:
    name: "Coveralls"
    if: "${{ inputs.enable-coveralls && github.run_attempt == '1' }}"
    needs: build
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Finished
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      run: |
        # Indicate completion to coveralls.io
        pip3 install --upgrade coveralls
        coveralls --service=github --finish
