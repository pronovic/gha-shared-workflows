# vim: set ft=yaml ts=2 sw=2:
name: Build and Test
on:
  workflow_call:
    inputs:
      matrix-os-version:
        description: "JSON array as a string, a list of operating systems for the matrix build"
        required: true
        type: string
      matrix-python-version:
        description: "JSON array as a string, a list of Python versions for the matrix build"
        required: true
        type: string
      poetry-version:
        description: "Version of Poetry to use for the build (>=1.8.0)"
        required: false
        default: "1.8.5"
        type: string
      plugin-version:
        description: "Version of the poetry-dynamic-versioning plugin to use for the build (>=1.2.0)"
        required: false
        default: "1.3.0"
        type: string
      poetry-plugins:
        description: "Comma-separated list of Poetry plugins to install, in addition to poetry-dynamic-versioning"
        required: false
        type: string
        default: ""
      poetry-cache-venv:
        description: "Whether to cache the Poetry virtualenv"
        required: false
        type: boolean
        default: true
      poetry-cache-install:
        description: "Whether to cache the Poetry install"
        required: false
        type: boolean
        default: true
      test-suite-command:
        description: "Shell command used to execute the test suite"
        required: false
        type: string
        default: "./run suite"
      timeout-minutes:
        description: "Job timeout in minutes"
        required: false
        type: number
        default: 30
      enable-coveralls:
        description: "Whether to enable coverage reporting to coveralls.io"
        required: false
        type: boolean
        default: false
      persist-python-version:
        description: "Which matrix Python version to persist artifacts for, if any"
        required: false
        type: string
        default: "none"  # default will never match ${{ matrix.python }}, so we default to not persisting
jobs:
  build:
    name: "Build"
    strategy:
      matrix:
        os: "${{ fromJson(inputs.matrix-os-version) }}"
        python: "${{ fromJson(inputs.matrix-python-version) }}"
    defaults:
      run:
        shell: bash
    runs-on: "${{ matrix.os }}"
    timeout-minutes: "${{ inputs.timeout-minutes }}"
    steps: 
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # pinned to SHA for v4.2.2
        with:
          # We need fetch-depth=0 so that tags are pulled.  Unfortunately, this also pulls
          # along all history, so it's much slower for repos with lots of commits.  I've
          # experimented with fetch-tags=true, which in theory would let us pull tags
          # without the hit of fetching all history, but it never works as expected.
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # pinned to SHA for v5.3.0
        with:
          python-version: "${{ matrix.python }}"
      - name: Setup Poetry
        uses: pronovic/setup-poetry@4dc2ce9a7c5efc1ed93255070bdfef280999bb6f # pinned to SHA for v2.0.2
        with:
          version: "${{ inputs.poetry-version }}"
          plugins: "poetry-dynamic-versioning==${{ inputs.plugin-version }},${{ inputs.poetry-plugins }}"
          cache-venv: "${{ inputs.poetry-cache-venv }}"
          cache-poetry: "${{ inputs.poetry-cache-install }}"
          cache-suffix: "${{ inputs.plugin-version }}"  # safest to bump this when upgrading plugin above
      - name: Install dependencies
        run: |
          # Install dependencies
          ./run install
      - name: Run test suite
        run: |
          # Run the test suite
          ${{ inputs.test-suite-command }}
      - name: Build artifacts
        if: "${{ inputs.persist-python-version == matrix.python }}"
        run: |
          # Build artifacts
          ./run build
      - name: Persist artifacts
        if: "${{ inputs.persist-python-version == matrix.python }}"
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # pinned to SHA for v4.4.3
        with:
          name: "python-package-distributions"
          path: "dist/"
      - name: Upload coverage data to coveralls.io
        # duplicate submissions fail with a 422 error, so only submit on the first run attempt
        if: "${{ inputs.enable-coveralls && github.run_attempt == '1' }}"
        uses: coverallsapp/github-action@cfd0633edbd2411b532b808ba7a8b5e04f76d2c8 # pinned to SHA for v2.3.4
        with:
          flag-name: "${{ runner.os }}-python${{ matrix.python }}"
          parallel: true
          file: ".coverage.lcov"
  coveralls:
    name: "Coveralls"
    # duplicate submissions fail with a 422 error, so only submit on the first run attempt
    if: "${{ inputs.enable-coveralls && github.run_attempt == '1' }}"
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: "${{ inputs.timeout-minutes }}"
    steps:
    - name: Upload coverage data to coveralls.io
      uses: coverallsapp/github-action@cfd0633edbd2411b532b808ba7a8b5e04f76d2c8 # pinned to SHA for v2.3.4
      with:
        parallel-finished: true
